First of all, for different command interfaces to achieve the function, i first instantiate a corresponding command interface, and then execute the interface execute function, if there is a return value, then i will return the value to cover the original value, to achieve the value of the update, in accordance with the idea of memo mode, i need to achieve the value of the update at the same time the original value of the pressure to the stack, Therefore, i design 2 stacks as redo, undo stack to save the data of the previous state, and withdraw and reply the data through the operation of out-stack and in-stack. The overall function mainly uses while loop to execute all the time, and switch to select different input results to execute the corresponding operation.

The system uses the factory pattern to create the athlete class and the team class, and then uses the command pattern to implement creating teams, adding athletes, etc. The command pattern is a behavioral design pattern whose purpose is to encapsulate a request into a single object, thus allowing for the parameterization of the client object with different requests, queue requests, and operation requests. It also supports undoable operations. For undo and redo operations, i used the memo pattern to implement them.

Designed the Play, Team, class, FootballTeam, VolleyballTeam inherit the Team class, TeamMemento for the memo record class, record the last state of the team. Common command interface Command, realize the information display function, create type command interface CreateCommand, realize the command with return value, realize the function of adding players, creating teams and other needs to record the team, Factory interface realize the creation of FootballTeam, VolleyballTeam.
